// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: protoBuf/server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MailingListService_CreateEMail_FullMethodName   = "/proto.MailingListService/CreateEMail"
	MailingListService_GetEMail_FullMethodName      = "/proto.MailingListService/GetEMail"
	MailingListService_GetEMailBatch_FullMethodName = "/proto.MailingListService/GetEMailBatch"
	MailingListService_UpDateEMail_FullMethodName   = "/proto.MailingListService/UpDateEMail"
	MailingListService_DeleteEMail_FullMethodName   = "/proto.MailingListService/DeleteEMail"
)

// MailingListServiceClient is the client API for MailingListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailingListServiceClient interface {
	CreateEMail(ctx context.Context, in *CreateEMailReQuest, opts ...grpc.CallOption) (*EMailResponse, error)
	GetEMail(ctx context.Context, in *GetEMailReQuest, opts ...grpc.CallOption) (*EMailResponse, error)
	GetEMailBatch(ctx context.Context, in *GetEMailBatchReQuest, opts ...grpc.CallOption) (*EMailBatchResponse, error)
	UpDateEMail(ctx context.Context, in *UpDateEMailReQuest, opts ...grpc.CallOption) (*EMailResponse, error)
	DeleteEMail(ctx context.Context, in *DeleteEMailReQuest, opts ...grpc.CallOption) (*EMailResponse, error)
}

type mailingListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailingListServiceClient(cc grpc.ClientConnInterface) MailingListServiceClient {
	return &mailingListServiceClient{cc}
}

func (c *mailingListServiceClient) CreateEMail(ctx context.Context, in *CreateEMailReQuest, opts ...grpc.CallOption) (*EMailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EMailResponse)
	err := c.cc.Invoke(ctx, MailingListService_CreateEMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingListServiceClient) GetEMail(ctx context.Context, in *GetEMailReQuest, opts ...grpc.CallOption) (*EMailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EMailResponse)
	err := c.cc.Invoke(ctx, MailingListService_GetEMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingListServiceClient) GetEMailBatch(ctx context.Context, in *GetEMailBatchReQuest, opts ...grpc.CallOption) (*EMailBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EMailBatchResponse)
	err := c.cc.Invoke(ctx, MailingListService_GetEMailBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingListServiceClient) UpDateEMail(ctx context.Context, in *UpDateEMailReQuest, opts ...grpc.CallOption) (*EMailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EMailResponse)
	err := c.cc.Invoke(ctx, MailingListService_UpDateEMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingListServiceClient) DeleteEMail(ctx context.Context, in *DeleteEMailReQuest, opts ...grpc.CallOption) (*EMailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EMailResponse)
	err := c.cc.Invoke(ctx, MailingListService_DeleteEMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailingListServiceServer is the server API for MailingListService service.
// All implementations must embed UnimplementedMailingListServiceServer
// for forward compatibility.
type MailingListServiceServer interface {
	CreateEMail(context.Context, *CreateEMailReQuest) (*EMailResponse, error)
	GetEMail(context.Context, *GetEMailReQuest) (*EMailResponse, error)
	GetEMailBatch(context.Context, *GetEMailBatchReQuest) (*EMailBatchResponse, error)
	UpDateEMail(context.Context, *UpDateEMailReQuest) (*EMailResponse, error)
	DeleteEMail(context.Context, *DeleteEMailReQuest) (*EMailResponse, error)
	mustEmbedUnimplementedMailingListServiceServer()
}

// UnimplementedMailingListServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMailingListServiceServer struct{}

func (UnimplementedMailingListServiceServer) CreateEMail(context.Context, *CreateEMailReQuest) (*EMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEMail not implemented")
}
func (UnimplementedMailingListServiceServer) GetEMail(context.Context, *GetEMailReQuest) (*EMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEMail not implemented")
}
func (UnimplementedMailingListServiceServer) GetEMailBatch(context.Context, *GetEMailBatchReQuest) (*EMailBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEMailBatch not implemented")
}
func (UnimplementedMailingListServiceServer) UpDateEMail(context.Context, *UpDateEMailReQuest) (*EMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpDateEMail not implemented")
}
func (UnimplementedMailingListServiceServer) DeleteEMail(context.Context, *DeleteEMailReQuest) (*EMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEMail not implemented")
}
func (UnimplementedMailingListServiceServer) mustEmbedUnimplementedMailingListServiceServer() {}
func (UnimplementedMailingListServiceServer) testEmbeddedByValue()                            {}

// UnsafeMailingListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailingListServiceServer will
// result in compilation errors.
type UnsafeMailingListServiceServer interface {
	mustEmbedUnimplementedMailingListServiceServer()
}

func RegisterMailingListServiceServer(s grpc.ServiceRegistrar, srv MailingListServiceServer) {
	// If the following call pancis, it indicates UnimplementedMailingListServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MailingListService_ServiceDesc, srv)
}

func _MailingListService_CreateEMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEMailReQuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingListServiceServer).CreateEMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailingListService_CreateEMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingListServiceServer).CreateEMail(ctx, req.(*CreateEMailReQuest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingListService_GetEMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEMailReQuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingListServiceServer).GetEMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailingListService_GetEMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingListServiceServer).GetEMail(ctx, req.(*GetEMailReQuest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingListService_GetEMailBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEMailBatchReQuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingListServiceServer).GetEMailBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailingListService_GetEMailBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingListServiceServer).GetEMailBatch(ctx, req.(*GetEMailBatchReQuest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingListService_UpDateEMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpDateEMailReQuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingListServiceServer).UpDateEMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailingListService_UpDateEMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingListServiceServer).UpDateEMail(ctx, req.(*UpDateEMailReQuest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingListService_DeleteEMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEMailReQuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingListServiceServer).DeleteEMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailingListService_DeleteEMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingListServiceServer).DeleteEMail(ctx, req.(*DeleteEMailReQuest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailingListService_ServiceDesc is the grpc.ServiceDesc for MailingListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailingListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MailingListService",
	HandlerType: (*MailingListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEMail",
			Handler:    _MailingListService_CreateEMail_Handler,
		},
		{
			MethodName: "GetEMail",
			Handler:    _MailingListService_GetEMail_Handler,
		},
		{
			MethodName: "GetEMailBatch",
			Handler:    _MailingListService_GetEMailBatch_Handler,
		},
		{
			MethodName: "UpDateEMail",
			Handler:    _MailingListService_UpDateEMail_Handler,
		},
		{
			MethodName: "DeleteEMail",
			Handler:    _MailingListService_DeleteEMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoBuf/server.proto",
}